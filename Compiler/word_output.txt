1 constsy const
2 intsy int
3 ident CONST_1
4 assign =
5 intcon 1
6 comma ,
7 ident CONST_2
8 assign =
9 plus +
10 intcon 2
11 comma ,
12 ident CONST_3
13 assign =
14 minus -
15 intcon 3
16 semicolon ;
17 constsy const
18 intsy int
19 ident TEN
20 assign =
21 intcon 10
22 semicolon ;
23 constsy const
24 charsy char
25 ident CONST_A
26 assign =
27 charcon a
28 comma ,
29 ident CONST_Z
30 assign =
31 charcon z
32 comma ,
33 ident CONST_
34 assign =
35 charcon _
36 semicolon ;
37 intsy int
38 ident n
39 comma ,
40 ident num
41 lsbrack [
42 intcon 10
43 rsbrack ]
44 semicolon ;
45 charsy char
46 ident c
47 comma ,
48 ident a
49 lsbrack [
50 intcon 10
51 rsbrack ]
52 semicolon ;
53 voidsy void
54 ident printf_char
55 lparent (
56 charsy char
57 ident c
58 rparent )
59 lcbrack {
60 printfsy printf
61 lparent (
62 ident c
63 rparent )
64 semicolon ;
65 rcbrack }
66 voidsy void
67 ident printf_num
68 lparent (
69 intsy int
70 ident n
71 rparent )
72 lcbrack {
73 printfsy printf
74 lparent (
75 ident n
76 rparent )
77 semicolon ;
78 rcbrack }
79 voidsy void
80 ident printf_str
81 lparent (
82 rparent )
83 lcbrack {
84 printfsy printf
85 lparent (
86 stringcon hh! This is a test string!
87 rparent )
88 semicolon ;
89 rcbrack }
90 voidsy void
91 ident printf_str_num
92 lparent (
93 intsy int
94 ident n
95 rparent )
96 lcbrack {
97 printfsy printf
98 lparent (
99 stringcon this n = 
100 comma ,
101 ident n
102 rparent )
103 semicolon ;
104 rcbrack }
105 voidsy void
106 ident printf_str_char
107 lparent (
108 charsy char
109 ident c
110 rparent )
111 lcbrack {
112 printfsy printf
113 lparent (
114 stringcon this c = 
115 comma ,
116 ident c
117 rparent )
118 semicolon ;
119 rcbrack }
120 voidsy void
121 ident print_ten_params
122 lparent (
123 intsy int
124 ident num0
125 comma ,
126 charsy char
127 ident a1
128 comma ,
129 intsy int
130 ident num2
131 comma ,
132 charsy char
133 ident a3
134 comma ,
135 intsy int
136 ident num4
137 comma ,
138 charsy char
139 ident a5
140 comma ,
141 charsy char
142 ident a6
143 comma ,
144 intsy int
145 ident num7
146 comma ,
147 charsy char
148 ident a8
149 comma ,
150 intsy int
151 ident num9
152 rparent )
153 lcbrack {
154 printfsy printf
155 lparent (
156 stringcon num[0] = 
157 comma ,
158 ident num0
159 rparent )
160 semicolon ;
161 printfsy printf
162 lparent (
163 stringcon num[2] = 
164 comma ,
165 ident num2
166 rparent )
167 semicolon ;
168 printfsy printf
169 lparent (
170 stringcon num[4] = 
171 comma ,
172 ident num4
173 rparent )
174 semicolon ;
175 ident printf_str_num
176 lparent (
177 ident num7
178 rparent )
179 semicolon ;
180 ident printf_num
181 lparent (
182 ident num9
183 rparent )
184 semicolon ;
185 printfsy printf
186 lparent (
187 stringcon a[1] = 
188 comma ,
189 ident a1
190 rparent )
191 semicolon ;
192 printfsy printf
193 lparent (
194 stringcon a[3], a[5], a[6], a[8]:
195 rparent )
196 semicolon ;
197 ident printf_str_char
198 lparent (
199 ident a3
200 rparent )
201 semicolon ;
202 ident printf_char
203 lparent (
204 ident a5
205 rparent )
206 semicolon ;
207 ident printf_char
208 lparent (
209 ident a6
210 rparent )
211 semicolon ;
212 ident printf_char
213 lparent (
214 ident a8
215 rparent )
216 semicolon ;
217 printfsy printf
218 lparent (
219 stringcon --end printf params---
220 rparent )
221 semicolon ;
222 rcbrack }
223 intsy int
224 ident fac
225 lparent (
226 intsy int
227 ident n
228 rparent )
229 lcbrack {
230 constsy const
231 intsy int
232 ident CONST_2
233 assign =
234 intcon 1
235 semicolon ;
236 ifsy if
237 lparent (
238 ident n
239 leq <=
240 intcon 0
241 rparent )
242 scanfsy return
243 lparent (
244 intcon 1
245 rparent )
246 semicolon ;
247 ifsy if
248 lparent (
249 ident n
250 eql ==
251 intcon 1
252 rparent )
253 scanfsy return
254 lparent (
255 ident CONST_2
256 rparent )
257 semicolon ;
258 ifsy if
259 lparent (
260 ident n
261 gtr >
262 ident CONST_1
263 rparent )
264 lcbrack {
265 scanfsy return
266 lparent (
267 ident n
268 mult *
269 ident fac
270 lparent (
271 ident n
272 minus -
273 intcon 1
274 rparent )
275 plus +
276 ident CONST_2
277 minus -
278 lparent (
279 ident TEN
280 rdiv /
281 intcon 7
282 rparent )
283 rparent )
284 semicolon ;
285 rcbrack }
286 rcbrack }
287 voidsy void
288 ident all_factorials
289 lparent (
290 intsy int
291 ident n
292 rparent )
293 lcbrack {
294 intsy int
295 ident i
296 comma ,
297 ident sum
298 semicolon ;
299 ident i
300 assign =
301 ident n
302 semicolon ;
303 ident sum
304 assign =
305 intcon 0
306 semicolon ;
307 switchsy while
308 lparent (
309 ident i
310 geq >=
311 intcon 0
312 rparent )
313 lcbrack {
314 ident sum
315 assign =
316 ident sum
317 plus +
318 ident i
319 semicolon ;
320 printfsy printf
321 lparent (
322 stringcon factorial of 
323 comma ,
324 ident i
325 rparent )
326 semicolon ;
327 ident printf_num
328 lparent (
329 ident fac
330 lparent (
331 ident i
332 rparent )
333 rparent )
334 semicolon ;
335 ident sum
336 assign =
337 ident sum
338 plus +
339 ident i
340 semicolon ;
341 ident i
342 assign =
343 ident i
344 minus -
345 intcon 1
346 semicolon ;
347 rcbrack }
348 printfsy printf
349 lparent (
350 stringcon sum of 1~
351 comma ,
352 ident n
353 rparent )
354 semicolon ;
355 ident printf_str_num
356 lparent (
357 ident sum
358 rdiv /
359 intcon 2
360 rparent )
361 semicolon ;
362 rcbrack }
363 intsy int
364 ident switch_test
365 lparent (
366 charsy char
367 ident ch
368 rparent )
369 lcbrack {
370 intsy int
371 ident expr
372 semicolon ;
373 charsy char
374 ident a
375 comma ,
376 ident b
377 comma ,
378 ident c
379 comma ,
380 ident d
381 comma ,
382 ident e
383 comma ,
384 ident f
385 comma ,
386 ident g
387 comma ,
388 ident h
389 comma ,
390 ident i
391 comma ,
392 ident j
393 comma ,
394 ident k
395 comma ,
396 ident l
397 comma ,
398 ident m
399 comma ,
400 ident n
401 comma ,
402 ident o
403 comma ,
404 ident p
405 comma ,
406 ident q
407 comma ,
408 ident r
409 comma ,
410 ident s
411 comma ,
412 ident t
413 comma ,
414 ident u
415 comma ,
416 ident v
417 comma ,
418 ident w
419 comma ,
420 ident x
421 comma ,
422 ident y
423 comma ,
424 ident z
425 semicolon ;
426 ident expr
427 assign =
428 ident TEN
429 semicolon ;
430 ident a
431 assign =
432 ident CONST_A
433 semicolon ;
434 ident b
435 assign =
436 charcon b
437 semicolon ;
438 ident c
439 assign =
440 charcon c
441 semicolon ;
442 ident d
443 assign =
444 charcon d
445 semicolon ;
446 ident e
447 assign =
448 charcon e
449 semicolon ;
450 ident f
451 assign =
452 charcon f
453 semicolon ;
454 ident g
455 assign =
456 charcon g
457 semicolon ;
458 ident h
459 assign =
460 charcon h
461 semicolon ;
462 ident i
463 assign =
464 charcon i
465 semicolon ;
466 ident j
467 assign =
468 charcon j
469 semicolon ;
470 ident k
471 assign =
472 charcon k
473 semicolon ;
474 ident l
475 assign =
476 charcon l
477 semicolon ;
478 ident m
479 assign =
480 charcon m
481 semicolon ;
482 ifsy if
483 lparent (
484 lparent (
485 ident m
486 rparent )
487 eql ==
488 lparent (
489 charcon m
490 rparent )
491 rparent )
492 lcbrack {
493 ident n
494 assign =
495 charcon n
496 semicolon ;
497 ident o
498 assign =
499 charcon o
500 semicolon ;
501 ident p
502 assign =
503 charcon p
504 semicolon ;
505 ident q
506 assign =
507 charcon q
508 semicolon ;
509 ident r
510 assign =
511 charcon r
512 semicolon ;
513 ident s
514 assign =
515 charcon s
516 semicolon ;
517 ident t
518 assign =
519 charcon t
520 semicolon ;
521 ident u
522 assign =
523 charcon u
524 semicolon ;
525 ident v
526 assign =
527 charcon v
528 semicolon ;
529 ident w
530 assign =
531 charcon w
532 semicolon ;
533 ident x
534 assign =
535 charcon x
536 semicolon ;
537 ident y
538 assign =
539 charcon y
540 semicolon ;
541 ident z
542 assign =
543 charcon z
544 semicolon ;
545 rcbrack }
546 casesy switch
547 lparent (
548 ident ch
549 rparent )
550 lcbrack {
551 defaultsy case
552 charcon a
553 colon :
554 lcbrack {
555 ident printf_num
556 lparent (
557 lparent (
558 ident d
559 plus +
560 ident e
561 rparent )
562 mult *
563 ident f
564 rdiv /
565 ident g
566 minus -
567 ident h
568 mult *
569 ident i
570 mult *
571 ident j
572 mult *
573 ident k
574 rdiv /
575 lparent (
576 ident l
577 plus +
578 ident m
579 plus +
580 ident n
581 mult *
582 lparent (
583 ident x
584 minus -
585 ident y
586 rparent )
587 plus +
588 lparent (
589 ident o
590 rdiv /
591 ident p
592 rparent )
593 mult *
594 ident TEN
595 minus -
596 ident f
597 mult *
598 lparent (
599 ident t
600 minus -
601 ident d
602 plus +
603 ident e
604 rparent )
605 rparent )
606 rparent )
607 semicolon ;
608 rcbrack }
609 defaultsy case
610 charcon b
611 colon :
612 lcbrack {
613 ident printf_char
614 lparent (
615 ident b
616 rparent )
617 semicolon ;
618 printfsy printf
619 lparent (
620 stringcon fac of 
621 comma ,
622 lparent (
623 ident b
624 rparent )
625 rparent )
626 semicolon ;
627 printfsy printf
628 lparent (
629 ident fac
630 lparent (
631 ident b
632 rdiv /
633 ident TEN
634 rparent )
635 rparent )
636 semicolon ;
637 rcbrack }
638 whilesy default
639 colon :
640 printfsy printf
641 lparent (
642 stringcon other character
643 rparent )
644 semicolon ;
645 rcbrack }
646 printfsy printf
647 lparent (
648 stringcon char is 
649 comma ,
650 ident ch
651 rparent )
652 semicolon ;
653 semicolon ;
654 lcbrack {
655 lcbrack {
656 lcbrack {
657 lcbrack {
658 semicolon ;
659 semicolon ;
660 semicolon ;
661 rcbrack }
662 rcbrack }
663 rcbrack }
664 rcbrack }
665 ident expr
666 assign =
667 minus -
668 ident a
669 plus +
670 ident b
671 plus +
672 ident c
673 plus +
674 ident d
675 plus +
676 ident e
677 plus +
678 ident f
679 plus +
680 ident g
681 plus +
682 ident h
683 plus +
684 ident i
685 plus +
686 ident j
687 plus +
688 ident k
689 plus +
690 ident l
691 plus +
692 ident m
693 plus +
694 ident n
695 mult *
696 lparent (
697 ident o
698 plus +
699 ident p
700 plus +
701 ident q
702 rparent )
703 rdiv /
704 ident r
705 minus -
706 lparent (
707 ident s
708 mult *
709 ident t
710 plus +
711 ident u
712 rparent )
713 rdiv /
714 ident v
715 plus +
716 ident w
717 mult *
718 ident TEN
719 minus -
720 ident x
721 mult *
722 ident CONST_A
723 plus +
724 ident y
725 mult *
726 ident CONST_Z
727 minus -
728 ident z
729 mult *
730 ident CONST_
731 semicolon ;
732 printfsy printf
733 lparent (
734 stringcon expr:
735 rparent )
736 semicolon ;
737 ident printf_num
738 lparent (
739 ident expr
740 rparent )
741 semicolon ;
742 scanfsy return
743 lparent (
744 intcon 1
745 rparent )
746 semicolon ;
747 rcbrack }
748 voidsy void
749 mainsy main
750 lparent (
751 rparent )
752 lcbrack {
753 intsy int
754 ident i
755 comma ,
756 ident j
757 comma ,
758 ident k
759 semicolon ;
760 ident num
761 lsbrack [
762 intcon 0
763 rsbrack ]
764 assign =
765 minus -
766 intcon 0
767 semicolon ;
768 ident num
769 lsbrack [
770 ident CONST_1
771 rsbrack ]
772 assign =
773 plus +
774 plus +
775 intcon 1
776 semicolon ;
777 ident num
778 lsbrack [
779 ident num
780 lsbrack [
781 intcon 1
782 rsbrack ]
783 plus +
784 intcon 1
785 rsbrack ]
786 assign =
787 minus -
788 minus -
789 intcon 2
790 semicolon ;
791 ident num
792 lsbrack [
793 ident TEN
794 rdiv /
795 ident num
796 lsbrack [
797 intcon 2
798 rsbrack ]
799 rsbrack ]
800 assign =
801 plus +
802 minus -
803 intcon 5
804 semicolon ;
805 ident num
806 lsbrack [
807 intcon 3
808 rsbrack ]
809 assign =
810 minus -
811 plus +
812 intcon 3
813 semicolon ;
814 ident num
815 lsbrack [
816 intcon 4
817 rsbrack ]
818 assign =
819 minus -
820 intcon 5
821 plus +
822 lparent (
823 plus +
824 plus +
825 intcon 1
826 minus -
827 minus -
828 intcon 2
829 mult *
830 intcon 4
831 rparent )
832 semicolon ;
833 ident num
834 lsbrack [
835 intcon 6
836 rsbrack ]
837 assign =
838 intcon 6
839 semicolon ;
840 ident i
841 assign =
842 intcon 7
843 semicolon ;
844 switchsy while
845 lparent (
846 ident i
847 lss <
848 ident TEN
849 rparent )
850 lcbrack {
851 ident num
852 lsbrack [
853 ident i
854 rsbrack ]
855 assign =
856 ident i
857 semicolon ;
858 ident i
859 assign =
860 ident i
861 plus +
862 intcon 1
863 semicolon ;
864 rcbrack }
865 ident printf_str
866 lparent (
867 rparent )
868 semicolon ;
869 printfsy printf
870 lparent (
871 stringcon read\\n i:
872 rparent )
873 semicolon ;
874 returnsy scanf
875 lparent (
876 ident i
877 rparent )
878 semicolon ;
879 ident printf_num
880 lparent (
881 ident i
882 rparent )
883 semicolon ;
884 printfsy printf
885 lparent (
886 stringcon read\\n j,k,char:
887 rparent )
888 semicolon ;
889 returnsy scanf
890 lparent (
891 ident j
892 comma ,
893 ident k
894 comma ,
895 ident c
896 rparent )
897 semicolon ;
898 ident printf_num
899 lparent (
900 ident j
901 rparent )
902 semicolon ;
903 ident printf_num
904 lparent (
905 ident k
906 rparent )
907 semicolon ;
908 ident printf_char
909 lparent (
910 ident c
911 rparent )
912 semicolon ;
913 switchsy while
914 lparent (
915 intcon 0
916 rparent )
917 ident printf_char
918 lparent (
919 ident CONST_
920 rparent )
921 semicolon ;
922 printfsy printf
923 lparent (
924 stringcon k>0?k:
925 comma ,
926 ident k
927 rparent )
928 semicolon ;
929 ifsy if
930 lparent (
931 ident k
932 gtr >
933 intcon 0
934 rparent )
935 ident switch_test
936 lparent (
937 ident c
938 rparent )
939 semicolon ;
940 ifsy if
941 lparent (
942 ident k
943 neq !=
944 plus +
945 intcon 100
946 rparent )
947 ident k
948 assign =
949 intcon 100
950 semicolon ;
951 ifsy if
952 lparent (
953 ident k
954 eql ==
955 intcon 100
956 rparent )
957 lcbrack {
958 ident k
959 assign =
960 intcon 0
961 semicolon ;
962 ident a
963 lsbrack [
964 ident k
965 rsbrack ]
966 assign =
967 ident c
968 semicolon ;
969 rcbrack }
970 ident c
971 assign =
972 charcon a
973 semicolon ;
974 ifsy if
975 lparent (
976 lparent (
977 ident c
978 rparent )
979 eql ==
980 lparent (
981 ident CONST_A
982 rparent )
983 rparent )
984 ident a
985 lsbrack [
986 ident k
987 plus +
988 intcon 1
989 rsbrack ]
990 assign =
991 ident c
992 semicolon ;
993 ident k
994 assign =
995 ident k
996 plus +
997 intcon 1
998 semicolon ;
999 ifsy if
1000 lparent (
1001 lparent (
1002 ident c
1003 rparent )
1004 neq !=
1005 lparent (
1006 charcon a
1007 rparent )
1008 rparent )
1009 printfsy printf
1010 lparent (
1011 stringcon A != a
1012 rparent )
1013 semicolon ;
1014 ident a
1015 lsbrack [
1016 ident k
1017 rsbrack ]
1018 assign =
1019 charcon b
1020 semicolon ;
1021 ident a
1022 lsbrack [
1023 ident k
1024 plus +
1025 intcon 1
1026 rsbrack ]
1027 assign =
1028 charcon d
1029 semicolon ;
1030 ident c
1031 assign =
1032 charcon c
1033 semicolon ;
1034 ifsy if
1035 lparent (
1036 lparent (
1037 ident c
1038 rparent )
1039 geq >=
1040 lparent (
1041 ident a
1042 lsbrack [
1043 ident k
1044 rsbrack ]
1045 rparent )
1046 rparent )
1047 printfsy printf
1048 lparent (
1049 stringcon ASCII: c >= b
1050 rparent )
1051 semicolon ;
1052 ifsy if
1053 lparent (
1054 lparent (
1055 ident c
1056 rparent )
1057 gtr >
1058 lparent (
1059 ident a
1060 lsbrack [
1061 ident k
1062 rsbrack ]
1063 rparent )
1064 rparent )
1065 printfsy printf
1066 lparent (
1067 stringcon ASCII: c > b
1068 rparent )
1069 semicolon ;
1070 ifsy if
1071 lparent (
1072 lparent (
1073 ident c
1074 rparent )
1075 leq <=
1076 lparent (
1077 ident a
1078 lsbrack [
1079 ident k
1080 plus +
1081 intcon 1
1082 rsbrack ]
1083 rparent )
1084 rparent )
1085 printfsy printf
1086 lparent (
1087 stringcon ASCII: c <= d
1088 rparent )
1089 semicolon ;
1090 ifsy if
1091 lparent (
1092 lparent (
1093 ident c
1094 rparent )
1095 lss <
1096 lparent (
1097 ident a
1098 lsbrack [
1099 ident k
1100 plus +
1101 ident CONST_1
1102 rsbrack ]
1103 rparent )
1104 rparent )
1105 printfsy printf
1106 lparent (
1107 stringcon ASCII: c < d
1108 rparent )
1109 semicolon ;
1110 ident k
1111 assign =
1112 ident k
1113 plus +
1114 ident CONST_2
1115 semicolon ;
1116 ident a
1117 lsbrack [
1118 ident k
1119 rsbrack ]
1120 assign =
1121 ident c
1122 semicolon ;
1123 ifsy if
1124 lparent (
1125 lparent (
1126 ident c
1127 rparent )
1128 eql ==
1129 lparent (
1130 ident a
1131 lsbrack [
1132 ident k
1133 rsbrack ]
1134 rparent )
1135 rparent )
1136 printfsy printf
1137 lparent (
1138 stringcon c == c
1139 rparent )
1140 semicolon ;
1141 ifsy if
1142 lparent (
1143 minus -
1144 ident CONST_3
1145 rparent )
1146 lcbrack {
1147 ident printf_num
1148 lparent (
1149 minus -
1150 ident CONST_3
1151 rparent )
1152 semicolon ;
1153 rcbrack }
1154 casesy switch
1155 lparent (
1156 minus -
1157 ident CONST_1
1158 rparent )
1159 lcbrack {
1160 defaultsy case
1161 minus -
1162 intcon 1
1163 colon :
1164 ident printf_str
1165 lparent (
1166 rparent )
1167 semicolon ;
1168 rcbrack }
1169 casesy switch
1170 lparent (
1171 ident CONST_2
1172 rparent )
1173 lcbrack {
1174 defaultsy case
1175 plus +
1176 intcon 2
1177 colon :
1178 lcbrack {
1179 ident printf_str
1180 lparent (
1181 rparent )
1182 semicolon ;
1183 rcbrack }
1184 rcbrack }
1185 ident all_factorials
1186 lparent (
1187 ident i
1188 plus +
1189 ident j
1190 rparent )
1191 semicolon ;
1192 ident i
1193 assign =
1194 intcon 9
1195 semicolon ;
1196 switchsy while
1197 lparent (
1198 ident i
1199 geq >=
1200 intcon 4
1201 rparent )
1202 lcbrack {
1203 ident a
1204 lsbrack [
1205 ident i
1206 rsbrack ]
1207 assign =
1208 charcon _
1209 semicolon ;
1210 ident i
1211 assign =
1212 ident i
1213 minus -
1214 intcon 1
1215 semicolon ;
1216 rcbrack }
1217 ident print_ten_params
1218 lparent (
1219 ident num
1220 lsbrack [
1221 intcon 0
1222 rsbrack ]
1223 comma ,
1224 ident a
1225 lsbrack [
1226 intcon 1
1227 rsbrack ]
1228 comma ,
1229 ident num
1230 lsbrack [
1231 intcon 2
1232 rsbrack ]
1233 comma ,
1234 ident a
1235 lsbrack [
1236 intcon 3
1237 rsbrack ]
1238 comma ,
1239 ident num
1240 lsbrack [
1241 intcon 4
1242 rsbrack ]
1243 comma ,
1244 ident a
1245 lsbrack [
1246 intcon 5
1247 rsbrack ]
1248 comma ,
1249 ident a
1250 lsbrack [
1251 intcon 6
1252 rsbrack ]
1253 comma ,
1254 ident num
1255 lsbrack [
1256 intcon 7
1257 rsbrack ]
1258 comma ,
1259 ident a
1260 lsbrack [
1261 intcon 8
1262 rsbrack ]
1263 comma ,
1264 ident num
1265 lsbrack [
1266 intcon 9
1267 rsbrack ]
1268 rparent )
1269 semicolon ;
1270 ident i
1271 assign =
1272 intcon 0
1273 semicolon ;
1274 printfsy printf
1275 lparent (
1276 stringcon printf num[10]
1277 rparent )
1278 semicolon ;
1279 switchsy while
1280 lparent (
1281 ident i
1282 lss <
1283 intcon 10
1284 rparent )
1285 lcbrack {
1286 ident printf_num
1287 lparent (
1288 ident num
1289 lsbrack [
1290 ident i
1291 rsbrack ]
1292 rparent )
1293 semicolon ;
1294 ident i
1295 assign =
1296 ident i
1297 plus +
1298 intcon 1
1299 semicolon ;
1300 rcbrack }
1301 ident j
1302 assign =
1303 ident CONST_1
1304 semicolon ;
1305 switchsy while
1306 lparent (
1307 ident j
1308 rparent )
1309 lcbrack {
1310 printfsy printf
1311 lparent (
1312 stringcon printf a[10]
1313 rparent )
1314 semicolon ;
1315 ident j
1316 assign =
1317 ident j
1318 minus -
1319 intcon 1
1320 semicolon ;
1321 rcbrack }
1322 ident i
1323 assign =
1324 intcon 0
1325 semicolon ;
1326 switchsy while
1327 lparent (
1328 intcon 10
1329 gtr >
1330 ident i
1331 rparent )
1332 lcbrack {
1333 ident printf_char
1334 lparent (
1335 ident a
1336 lsbrack [
1337 ident i
1338 rsbrack ]
1339 rparent )
1340 semicolon ;
1341 ident i
1342 assign =
1343 ident i
1344 plus +
1345 intcon 1
1346 semicolon ;
1347 rcbrack }
1348 printfsy printf
1349 lparent (
1350 stringcon i, j, k, c:
1351 rparent )
1352 semicolon ;
1353 ident printf_num
1354 lparent (
1355 ident i
1356 rparent )
1357 semicolon ;
1358 ident printf_num
1359 lparent (
1360 ident j
1361 rparent )
1362 semicolon ;
1363 ident printf_num
1364 lparent (
1365 ident k
1366 rparent )
1367 semicolon ;
1368 ident printf_char
1369 lparent (
1370 ident c
1371 rparent )
1372 semicolon ;
1373 rcbrack }
