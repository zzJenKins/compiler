1 constsy const
2 intsy int
3 ident const_1
4 assign =
5 intcon 1
6 comma ,
7 ident const_2
8 assign =
9 intcon 2
10 semicolon ;
11 constsy const
12 intsy int
13 ident const_3
14 assign =
15 intcon 3
16 semicolon ;
17 constsy const
18 charsy char
19 ident const_a
20 assign =
21 charcon a
22 comma ,
23 ident const_b
24 assign =
25 charcon b
26 semicolon ;
27 constsy const
28 charsy char
29 ident const_c
30 assign =
31 charcon c
32 semicolon ;
33 constsy const
34 charsy char
35 ident const_
36 assign =
37 charcon _
38 semicolon ;
39 intsy int
40 ident count
41 comma ,
42 ident num
43 lsbrack [
44 intcon 10
45 rsbrack ]
46 comma ,
47 ident letter
48 lsbrack [
49 intcon 5
50 rsbrack ]
51 semicolon ;
52 charsy char
53 ident s
54 semicolon ;
55 intsy int
56 ident _
57 comma ,
58 ident __
59 comma ,
60 ident ___
61 comma ,
62 ident __a__
63 comma ,
64 ident _a_
65 semicolon ;
66 intsy int
67 ident judge
68 semicolon ;
69 intsy int
70 ident get_sum
71 lparent (
72 intsy int
73 ident a
74 rparent )
75 lcbrack {
76 intsy int
77 ident b
78 semicolon ;
79 ident judge
80 assign =
81 ident judge
82 plus +
83 intcon 1
84 semicolon ;
85 ident count
86 assign =
87 ident count
88 plus +
89 intcon 1
90 semicolon ;
91 ident b
92 assign =
93 intcon 0
94 semicolon ;
95 ifsy if
96 lparent (
97 ident a
98 neq !=
99 intcon 1
100 rparent )
101 lcbrack {
102 ident b
103 assign =
104 ident get_sum
105 lparent (
106 ident a
107 minus -
108 intcon 1
109 rparent )
110 semicolon ;
111 ident judge
112 assign =
113 ident judge
114 plus +
115 intcon 1
116 semicolon ;
117 rcbrack }
118 scanfsy return
119 lparent (
120 ident b
121 plus +
122 ident a
123 rparent )
124 semicolon ;
125 rcbrack }
126 intsy int
127 ident count_to_10
128 lparent (
129 rparent )
130 lcbrack {
131 ident judge
132 assign =
133 ident judge
134 plus +
135 intcon 1
136 semicolon ;
137 scanfsy return
138 lparent (
139 ident get_sum
140 lparent (
141 intcon 10
142 rparent )
143 rparent )
144 semicolon ;
145 rcbrack }
146 charsy char
147 ident higher
148 lparent (
149 charsy char
150 ident a
151 rparent )
152 lcbrack {
153 scanfsy return
154 lparent (
155 charcon A
156 rparent )
157 semicolon ;
158 rcbrack }
159 charsy char
160 ident prt_message
161 lparent (
162 rparent )
163 lcbrack {
164 ident judge
165 assign =
166 ident judge
167 plus +
168 intcon 1
169 semicolon ;
170 printfsy printf
171 lparent (
172 stringcon  !#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~
173 rparent )
174 semicolon ;
175 scanfsy return
176 lparent (
177 charcon a
178 rparent )
179 semicolon ;
180 rcbrack }
181 voidsy void
182 ident test_global_variable
183 lparent (
184 rparent )
185 lcbrack {
186 intsy int
187 ident a
188 comma ,
189 ident flag
190 semicolon ;
191 ident judge
192 assign =
193 ident judge
194 plus +
195 intcon 1
196 semicolon ;
197 ident a
198 assign =
199 intcon 0
200 semicolon ;
201 ident flag
202 assign =
203 intcon 0
204 semicolon ;
205 ident count
206 assign =
207 intcon 2
208 semicolon ;
209 ident letter
210 lsbrack [
211 intcon 0
212 rsbrack ]
213 assign =
214 charcon a
215 semicolon ;
216 ident letter
217 lsbrack [
218 intcon 1
219 rsbrack ]
220 assign =
221 charcon 1
222 semicolon ;
223 ident letter
224 lsbrack [
225 intcon 2
226 rsbrack ]
227 assign =
228 charcon _
229 semicolon ;
230 ident letter
231 lsbrack [
232 intcon 3
233 rsbrack ]
234 assign =
235 charcon +
236 semicolon ;
237 ident letter
238 lsbrack [
239 intcon 4
240 rsbrack ]
241 assign =
242 charcon A
243 semicolon ;
244 printfsy printf
245 lparent (
246 ident count
247 rparent )
248 semicolon ;
249 printfsy printf
250 lparent (
251 ident letter
252 lsbrack [
253 intcon 0
254 rsbrack ]
255 rparent )
256 semicolon ;
257 ifsy if
258 lparent (
259 ident count
260 eql ==
261 intcon 2
262 rparent )
263 lcbrack {
264 ident judge
265 assign =
266 ident judge
267 plus +
268 intcon 1
269 semicolon ;
270 rcbrack }
271 ifsy if
272 lparent (
273 ident count
274 eql ==
275 intcon 1
276 rparent )
277 lcbrack {
278 ident judge
279 assign =
280 ident judge
281 plus +
282 intcon 1
283 semicolon ;
284 ident flag
285 assign =
286 intcon 1
287 semicolon ;
288 rcbrack }
289 ifsy if
290 lparent (
291 ident flag
292 eql ==
293 intcon 0
294 rparent )
295 lcbrack {
296 ident judge
297 assign =
298 ident judge
299 plus +
300 intcon 1
301 semicolon ;
302 rcbrack }
303 ident _
304 assign =
305 intcon 1
306 semicolon ;
307 ident __
308 assign =
309 intcon 2
310 semicolon ;
311 ident ___
312 assign =
313 intcon 3
314 semicolon ;
315 ident __a__
316 assign =
317 intcon 4
318 semicolon ;
319 ident _a_
320 assign =
321 intcon 5
322 semicolon ;
323 ident flag
324 assign =
325 intcon 0
326 semicolon ;
327 ifsy if
328 lparent (
329 ident _
330 eql ==
331 intcon 1
332 rparent )
333 ident judge
334 assign =
335 ident judge
336 plus +
337 intcon 1
338 semicolon ;
339 ifsy if
340 lparent (
341 ident _
342 eql ==
343 intcon 0
344 rparent )
345 lcbrack {
346 ident flag
347 assign =
348 intcon 1
349 semicolon ;
350 rcbrack }
351 ifsy if
352 lparent (
353 ident flag
354 eql ==
355 intcon 0
356 rparent )
357 ident judge
358 assign =
359 ident judge
360 plus +
361 intcon 1
362 semicolon ;
363 ident flag
364 assign =
365 intcon 0
366 semicolon ;
367 ifsy if
368 lparent (
369 ident __
370 eql ==
371 intcon 2
372 rparent )
373 ident judge
374 assign =
375 ident judge
376 plus +
377 intcon 1
378 semicolon ;
379 ifsy if
380 lparent (
381 ident __
382 eql ==
383 intcon 0
384 rparent )
385 lcbrack {
386 ident judge
387 assign =
388 ident judge
389 plus +
390 intcon 1
391 semicolon ;
392 ident flag
393 assign =
394 intcon 1
395 semicolon ;
396 rcbrack }
397 ifsy if
398 lparent (
399 ident flag
400 eql ==
401 intcon 0
402 rparent )
403 ident judge
404 assign =
405 ident judge
406 plus +
407 intcon 1
408 semicolon ;
409 ident flag
410 assign =
411 intcon 0
412 semicolon ;
413 ifsy if
414 lparent (
415 ident ___
416 eql ==
417 intcon 3
418 rparent )
419 ident judge
420 assign =
421 ident judge
422 plus +
423 intcon 1
424 semicolon ;
425 ifsy if
426 lparent (
427 ident ___
428 eql ==
429 intcon 0
430 rparent )
431 lcbrack {
432 ident judge
433 assign =
434 ident judge
435 plus +
436 intcon 1
437 semicolon ;
438 ident flag
439 assign =
440 intcon 1
441 semicolon ;
442 rcbrack }
443 ifsy if
444 lparent (
445 ident flag
446 eql ==
447 intcon 0
448 rparent )
449 ident judge
450 assign =
451 ident judge
452 plus +
453 intcon 1
454 semicolon ;
455 ident flag
456 assign =
457 intcon 0
458 semicolon ;
459 ifsy if
460 lparent (
461 ident __a__
462 eql ==
463 intcon 4
464 rparent )
465 ident judge
466 assign =
467 ident judge
468 plus +
469 intcon 1
470 semicolon ;
471 ifsy if
472 lparent (
473 ident __a__
474 eql ==
475 intcon 0
476 rparent )
477 lcbrack {
478 ident judge
479 assign =
480 ident judge
481 plus +
482 intcon 1
483 semicolon ;
484 ident flag
485 assign =
486 intcon 1
487 semicolon ;
488 rcbrack }
489 ifsy if
490 lparent (
491 ident flag
492 eql ==
493 intcon 0
494 rparent )
495 ident judge
496 assign =
497 ident judge
498 plus +
499 intcon 1
500 semicolon ;
501 ident flag
502 assign =
503 intcon 0
504 semicolon ;
505 ifsy if
506 lparent (
507 ident _a_
508 eql ==
509 intcon 5
510 rparent )
511 ident judge
512 assign =
513 ident judge
514 plus +
515 intcon 1
516 semicolon ;
517 ifsy if
518 lparent (
519 ident _a_
520 eql ==
521 intcon 0
522 rparent )
523 lcbrack {
524 ident judge
525 assign =
526 ident judge
527 plus +
528 intcon 1
529 semicolon ;
530 ident flag
531 assign =
532 intcon 1
533 semicolon ;
534 rcbrack }
535 ifsy if
536 lparent (
537 ident flag
538 eql ==
539 intcon 0
540 rparent )
541 ident judge
542 assign =
543 ident judge
544 plus +
545 intcon 1
546 semicolon ;
547 scanfsy return
548 semicolon ;
549 rcbrack }
550 voidsy void
551 ident test_global_const
552 lparent (
553 rparent )
554 lcbrack {
555 intsy int
556 ident x
557 semicolon ;
558 charsy char
559 ident y
560 semicolon ;
561 intsy int
562 ident num
563 lsbrack [
564 intcon 2
565 rsbrack ]
566 semicolon ;
567 intsy int
568 ident _
569 semicolon ;
570 ident _
571 assign =
572 intcon 100
573 semicolon ;
574 ifsy if
575 lparent (
576 ident _
577 eql ==
578 intcon 100
579 rparent )
580 ident judge
581 assign =
582 ident judge
583 plus +
584 intcon 1
585 semicolon ;
586 ident num
587 lsbrack [
588 intcon 0
589 rsbrack ]
590 assign =
591 intcon 100
592 semicolon ;
593 ident num
594 lsbrack [
595 intcon 1
596 rsbrack ]
597 assign =
598 intcon 101
599 semicolon ;
600 ifsy if
601 lparent (
602 ident num
603 lsbrack [
604 intcon 0
605 rsbrack ]
606 eql ==
607 intcon 100
608 rparent )
609 ident judge
610 assign =
611 ident judge
612 plus +
613 intcon 1
614 semicolon ;
615 ifsy if
616 lparent (
617 ident num
618 lsbrack [
619 intcon 1
620 rsbrack ]
621 eql ==
622 intcon 101
623 rparent )
624 ident judge
625 assign =
626 ident judge
627 plus +
628 intcon 1
629 semicolon ;
630 ident judge
631 assign =
632 ident judge
633 plus +
634 intcon 1
635 semicolon ;
636 ifsy if
637 lparent (
638 ident const_1
639 eql ==
640 intcon 1
641 rparent )
642 ident judge
643 assign =
644 ident judge
645 plus +
646 intcon 1
647 semicolon ;
648 ifsy if
649 lparent (
650 ident const_a
651 eql ==
652 charcon a
653 rparent )
654 ident judge
655 assign =
656 ident judge
657 plus +
658 intcon 1
659 semicolon ;
660 ifsy if
661 lparent (
662 ident const_
663 eql ==
664 charcon _
665 rparent )
666 ident judge
667 assign =
668 ident judge
669 plus +
670 intcon 1
671 semicolon ;
672 ident y
673 assign =
674 ident const_a
675 semicolon ;
676 ident x
677 assign =
678 ident y
679 plus +
680 ident const_a
681 semicolon ;
682 ifsy if
683 lparent (
684 ident x
685 eql ==
686 intcon 194
687 rparent )
688 ident judge
689 assign =
690 ident judge
691 plus +
692 intcon 1
693 semicolon ;
694 casesy switch
695 lparent (
696 ident const_1
697 rparent )
698 lcbrack {
699 defaultsy case
700 intcon 1
701 colon :
702 lcbrack {
703 ident judge
704 assign =
705 ident judge
706 plus +
707 intcon 1
708 semicolon ;
709 rcbrack }
710 whilesy default
711 colon :
712 semicolon ;
713 rcbrack }
714 casesy switch
715 lparent (
716 ident const_1
717 rparent )
718 lcbrack {
719 defaultsy case
720 intcon 0
721 colon :
722 lcbrack {
723 ident judge
724 assign =
725 ident judge
726 plus +
727 intcon 1
728 semicolon ;
729 rcbrack }
730 whilesy default
731 colon :
732 lcbrack {
733 semicolon ;
734 rcbrack }
735 rcbrack }
736 ident x
737 assign =
738 intcon 0
739 semicolon ;
740 switchsy while
741 lparent (
742 ident x
743 lss <
744 ident const_2
745 rparent )
746 lcbrack {
747 ident judge
748 assign =
749 ident judge
750 plus +
751 intcon 1
752 semicolon ;
753 ident x
754 assign =
755 ident x
756 plus +
757 intcon 1
758 semicolon ;
759 rcbrack }
760 rcbrack }
761 voidsy void
762 ident test_brackets
763 lparent (
764 rparent )
765 lcbrack {
766 ident judge
767 assign =
768 ident judge
769 plus +
770 intcon 1
771 semicolon ;
772 lcbrack {
773 lcbrack {
774 lcbrack {
775 rcbrack }
776 rcbrack }
777 rcbrack }
778 lcbrack {
779 semicolon ;
780 rcbrack }
781 scanfsy return
782 semicolon ;
783 rcbrack }
784 voidsy void
785 ident test_compare_operator
786 lparent (
787 rparent )
788 lcbrack {
789 intsy int
790 ident x
791 comma ,
792 ident y
793 comma ,
794 ident flag
795 semicolon ;
796 ident x
797 assign =
798 intcon 0
799 semicolon ;
800 ident y
801 assign =
802 intcon 1
803 semicolon ;
804 ident flag
805 assign =
806 intcon 0
807 semicolon ;
808 ifsy if
809 lparent (
810 ident x
811 lss <
812 ident y
813 rparent )
814 lcbrack {
815 ident judge
816 assign =
817 ident judge
818 plus +
819 intcon 1
820 semicolon ;
821 rcbrack }
822 ifsy if
823 lparent (
824 ident y
825 gtr >
826 ident x
827 rparent )
828 lcbrack {
829 ident judge
830 assign =
831 ident judge
832 plus +
833 intcon 1
834 semicolon ;
835 rcbrack }
836 ifsy if
837 lparent (
838 ident x
839 eql ==
840 ident y
841 rparent )
842 lcbrack {
843 ident judge
844 assign =
845 ident judge
846 plus +
847 intcon 1
848 semicolon ;
849 ident flag
850 assign =
851 intcon 1
852 semicolon ;
853 rcbrack }
854 ifsy if
855 lparent (
856 ident flag
857 eql ==
858 intcon 0
859 rparent )
860 lcbrack {
861 ident judge
862 assign =
863 ident judge
864 plus +
865 intcon 1
866 semicolon ;
867 rcbrack }
868 ifsy if
869 lparent (
870 ident x
871 neq !=
872 ident y
873 rparent )
874 lcbrack {
875 ident judge
876 assign =
877 ident judge
878 plus +
879 intcon 1
880 semicolon ;
881 rcbrack }
882 ident x
883 assign =
884 intcon 0
885 semicolon ;
886 switchsy while
887 lparent (
888 ident x
889 leq <=
890 intcon 1
891 rparent )
892 lcbrack {
893 ifsy if
894 lparent (
895 ident x
896 leq <=
897 ident y
898 rparent )
899 lcbrack {
900 ident judge
901 assign =
902 ident judge
903 plus +
904 intcon 1
905 semicolon ;
906 rcbrack }
907 ident x
908 assign =
909 ident x
910 plus +
911 intcon 1
912 semicolon ;
913 rcbrack }
914 ident x
915 assign =
916 intcon 0
917 semicolon ;
918 switchsy while
919 lparent (
920 ident x
921 leq <=
922 intcon 1
923 rparent )
924 lcbrack {
925 ifsy if
926 lparent (
927 ident y
928 geq >=
929 ident x
930 rparent )
931 lcbrack {
932 ident judge
933 assign =
934 ident judge
935 plus +
936 intcon 1
937 semicolon ;
938 rcbrack }
939 ident x
940 assign =
941 ident x
942 plus +
943 intcon 1
944 semicolon ;
945 rcbrack }
946 rcbrack }
947 voidsy void
948 ident test_expression
949 lparent (
950 rparent )
951 lcbrack {
952 intsy int
953 ident a
954 comma ,
955 ident b
956 semicolon ;
957 charsy char
958 ident c
959 comma ,
960 ident d
961 comma ,
962 ident e
963 comma ,
964 ident f
965 comma ,
966 ident g
967 semicolon ;
968 ident a
969 assign =
970 intcon 0
971 semicolon ;
972 ident b
973 assign =
974 intcon 0
975 semicolon ;
976 ident c
977 assign =
978 charcon a
979 semicolon ;
980 ident d
981 assign =
982 charcon b
983 semicolon ;
984 ident e
985 assign =
986 charcon c
987 semicolon ;
988 ident judge
989 assign =
990 ident judge
991 plus +
992 intcon 1
993 semicolon ;
994 ident a
995 assign =
996 plus +
997 ident a
998 semicolon ;
999 ifsy if
1000 lparent (
1001 ident a
1002 eql ==
1003 intcon 0
1004 rparent )
1005 ident judge
1006 assign =
1007 ident judge
1008 plus +
1009 intcon 1
1010 semicolon ;
1011 ident a
1012 assign =
1013 minus -
1014 ident a
1015 semicolon ;
1016 ifsy if
1017 lparent (
1018 ident a
1019 eql ==
1020 intcon 0
1021 rparent )
1022 ident judge
1023 assign =
1024 ident judge
1025 plus +
1026 intcon 1
1027 semicolon ;
1028 ident a
1029 assign =
1030 plus +
1031 ident c
1032 semicolon ;
1033 ifsy if
1034 lparent (
1035 ident a
1036 eql ==
1037 intcon 97
1038 rparent )
1039 ident judge
1040 assign =
1041 ident judge
1042 plus +
1043 intcon 1
1044 semicolon ;
1045 ident a
1046 assign =
1047 minus -
1048 ident c
1049 semicolon ;
1050 ifsy if
1051 lparent (
1052 ident a
1053 eql ==
1054 minus -
1055 intcon 97
1056 rparent )
1057 ident judge
1058 assign =
1059 ident judge
1060 plus +
1061 intcon 1
1062 semicolon ;
1063 ident a
1064 assign =
1065 ident const_3
1066 semicolon ;
1067 ifsy if
1068 lparent (
1069 ident a
1070 eql ==
1071 intcon 3
1072 rparent )
1073 ident judge
1074 assign =
1075 ident judge
1076 plus +
1077 intcon 1
1078 semicolon ;
1079 ident a
1080 assign =
1081 plus +
1082 minus -
1083 intcon 1
1084 semicolon ;
1085 ifsy if
1086 lparent (
1087 ident a
1088 eql ==
1089 minus -
1090 intcon 1
1091 rparent )
1092 ident judge
1093 assign =
1094 ident judge
1095 plus +
1096 intcon 1
1097 semicolon ;
1098 ident a
1099 assign =
1100 minus -
1101 minus -
1102 intcon 1
1103 semicolon ;
1104 ifsy if
1105 lparent (
1106 ident a
1107 eql ==
1108 intcon 1
1109 rparent )
1110 ident judge
1111 assign =
1112 ident judge
1113 plus +
1114 intcon 1
1115 semicolon ;
1116 ident a
1117 assign =
1118 plus +
1119 plus +
1120 intcon 1
1121 semicolon ;
1122 ifsy if
1123 lparent (
1124 ident a
1125 eql ==
1126 intcon 1
1127 rparent )
1128 ident judge
1129 assign =
1130 ident judge
1131 plus +
1132 intcon 1
1133 semicolon ;
1134 ident a
1135 assign =
1136 minus -
1137 plus +
1138 intcon 1
1139 semicolon ;
1140 ifsy if
1141 lparent (
1142 ident a
1143 eql ==
1144 minus -
1145 intcon 1
1146 rparent )
1147 ident judge
1148 assign =
1149 ident judge
1150 plus +
1151 intcon 1
1152 semicolon ;
1153 ident a
1154 assign =
1155 lparent (
1156 lparent (
1157 lparent (
1158 intcon 1
1159 rparent )
1160 rparent )
1161 rparent )
1162 semicolon ;
1163 ifsy if
1164 lparent (
1165 ident a
1166 eql ==
1167 intcon 1
1168 rparent )
1169 ident judge
1170 assign =
1171 ident judge
1172 plus +
1173 intcon 1
1174 semicolon ;
1175 ident a
1176 assign =
1177 intcon 3
1178 mult *
1179 minus -
1180 intcon 3
1181 semicolon ;
1182 ifsy if
1183 lparent (
1184 ident a
1185 eql ==
1186 minus -
1187 intcon 9
1188 rparent )
1189 ident judge
1190 assign =
1191 ident judge
1192 plus +
1193 intcon 1
1194 semicolon ;
1195 ident b
1196 assign =
1197 intcon 5
1198 semicolon ;
1199 ident a
1200 assign =
1201 minus -
1202 lparent (
1203 ident num
1204 lsbrack [
1205 ident b
1206 rsbrack ]
1207 plus +
1208 ident num
1209 lsbrack [
1210 ident b
1211 plus +
1212 ident const_1
1213 rsbrack ]
1214 plus +
1215 intcon 3
1216 rparent )
1217 mult *
1218 ident count_to_10
1219 lparent (
1220 rparent )
1221 rdiv /
1222 ident const_3
1223 plus +
1224 charcon a
1225 plus +
1226 ident const_a
1227 minus -
1228 intcon 3
1229 mult *
1230 intcon 3
1231 rdiv /
1232 intcon 4
1233 plus +
1234 ident letter
1235 lsbrack [
1236 intcon 0
1237 rsbrack ]
1238 semicolon ;
1239 ifsy if
1240 lparent (
1241 ident a
1242 eql ==
1243 intcon 33
1244 rparent )
1245 ident judge
1246 assign =
1247 ident judge
1248 plus +
1249 intcon 1
1250 semicolon ;
1251 ident a
1252 assign =
1253 intcon 1
1254 semicolon ;
1255 ident b
1256 assign =
1257 intcon 1
1258 semicolon ;
1259 ident f
1260 assign =
1261 charcon a
1262 semicolon ;
1263 ident g
1264 assign =
1265 charcon q
1266 semicolon ;
1267 ident a
1268 assign =
1269 ident a
1270 mult *
1271 lparent (
1272 ident b
1273 plus +
1274 ident c
1275 mult *
1276 lparent (
1277 ident d
1278 plus +
1279 lparent (
1280 ident e
1281 plus +
1282 ident f
1283 mult *
1284 ident g
1285 rparent )
1286 rparent )
1287 rparent )
1288 semicolon ;
1289 ident judge
1290 assign =
1291 ident judge
1292 plus +
1293 ident a
1294 rdiv /
1295 intcon 1024
1296 semicolon ;
1297 scanfsy return
1298 semicolon ;
1299 rcbrack }
1300 voidsy void
1301 ident test_while
1302 lparent (
1303 rparent )
1304 lcbrack {
1305 intsy int
1306 ident a
1307 comma ,
1308 ident b
1309 semicolon ;
1310 ident b
1311 assign =
1312 intcon 9
1313 semicolon ;
1314 switchsy while
1315 lparent (
1316 ident b
1317 geq >=
1318 intcon 0
1319 rparent )
1320 lcbrack {
1321 ifsy if
1322 lparent (
1323 ident b
1324 geq >=
1325 intcon 5
1326 rparent )
1327 ident judge
1328 assign =
1329 ident judge
1330 plus +
1331 intcon 1
1332 semicolon ;
1333 ident b
1334 assign =
1335 ident b
1336 minus -
1337 intcon 1
1338 semicolon ;
1339 rcbrack }
1340 ident b
1341 assign =
1342 intcon 0
1343 semicolon ;
1344 switchsy while
1345 lparent (
1346 ident b
1347 leq <=
1348 intcon 2
1349 rparent )
1350 lcbrack {
1351 casesy switch
1352 lparent (
1353 ident b
1354 rparent )
1355 lcbrack {
1356 defaultsy case
1357 intcon 0
1358 colon :
1359 lcbrack {
1360 ident judge
1361 assign =
1362 ident judge
1363 plus +
1364 intcon 1
1365 semicolon ;
1366 rcbrack }
1367 defaultsy case
1368 intcon 1
1369 colon :
1370 lcbrack {
1371 ident judge
1372 assign =
1373 ident judge
1374 plus +
1375 intcon 1
1376 semicolon ;
1377 rcbrack }
1378 whilesy default
1379 colon :
1380 lcbrack {
1381 ident judge
1382 assign =
1383 ident judge
1384 plus +
1385 intcon 1
1386 semicolon ;
1387 rcbrack }
1388 rcbrack }
1389 ident b
1390 assign =
1391 ident b
1392 plus +
1393 intcon 1
1394 semicolon ;
1395 rcbrack }
1396 ident b
1397 assign =
1398 intcon 0
1399 semicolon ;
1400 ident a
1401 assign =
1402 intcon 0
1403 semicolon ;
1404 switchsy while
1405 lparent (
1406 ident a
1407 leq <=
1408 intcon 2
1409 rparent )
1410 lcbrack {
1411 ident b
1412 assign =
1413 intcon 0
1414 semicolon ;
1415 switchsy while
1416 lparent (
1417 ident b
1418 leq <=
1419 intcon 2
1420 rparent )
1421 lcbrack {
1422 ident judge
1423 assign =
1424 ident judge
1425 plus +
1426 intcon 1
1427 semicolon ;
1428 ident b
1429 assign =
1430 ident b
1431 plus +
1432 intcon 1
1433 semicolon ;
1434 rcbrack }
1435 ident a
1436 assign =
1437 ident a
1438 plus +
1439 intcon 1
1440 semicolon ;
1441 rcbrack }
1442 ident b
1443 assign =
1444 intcon 0
1445 semicolon ;
1446 ident a
1447 assign =
1448 intcon 11
1449 semicolon ;
1450 switchsy while
1451 lparent (
1452 ident b
1453 lss <
1454 intcon 10
1455 rparent )
1456 lcbrack {
1457 ident num
1458 lsbrack [
1459 ident b
1460 rsbrack ]
1461 assign =
1462 ident b
1463 mult *
1464 ident a
1465 semicolon ;
1466 ident judge
1467 assign =
1468 ident judge
1469 plus +
1470 ident num
1471 lsbrack [
1472 ident b
1473 rsbrack ]
1474 semicolon ;
1475 ident b
1476 assign =
1477 ident b
1478 plus +
1479 intcon 1
1480 semicolon ;
1481 ident a
1482 assign =
1483 ident a
1484 plus +
1485 intcon 2
1486 semicolon ;
1487 rcbrack }
1488 scanfsy return
1489 semicolon ;
1490 rcbrack }
1491 voidsy void
1492 ident test_if
1493 lparent (
1494 rparent )
1495 lcbrack {
1496 intsy int
1497 ident a
1498 comma ,
1499 ident flag
1500 semicolon ;
1501 charsy char
1502 ident c
1503 semicolon ;
1504 ident a
1505 assign =
1506 intcon 0
1507 semicolon ;
1508 ident flag
1509 assign =
1510 intcon 0
1511 semicolon ;
1512 ident judge
1513 assign =
1514 ident judge
1515 plus +
1516 intcon 1
1517 semicolon ;
1518 ifsy if
1519 lparent (
1520 ident const_1
1521 eql ==
1522 intcon 1
1523 rparent )
1524 lcbrack {
1525 rcbrack }
1526 ifsy if
1527 lparent (
1528 ident const_1
1529 eql ==
1530 intcon 1
1531 rparent )
1532 semicolon ;
1533 ifsy if
1534 lparent (
1535 ident const_1
1536 eql ==
1537 intcon 1
1538 rparent )
1539 lcbrack {
1540 semicolon ;
1541 rcbrack }
1542 ident a
1543 assign =
1544 intcon 0
1545 semicolon ;
1546 switchsy while
1547 lparent (
1548 ident a
1549 leq <=
1550 intcon 1
1551 rparent )
1552 lcbrack {
1553 ifsy if
1554 lparent (
1555 ident const_1
1556 eql ==
1557 intcon 1
1558 rparent )
1559 lcbrack {
1560 ifsy if
1561 lparent (
1562 ident a
1563 eql ==
1564 intcon 0
1565 rparent )
1566 lcbrack {
1567 ident judge
1568 assign =
1569 ident judge
1570 plus +
1571 intcon 1
1572 semicolon ;
1573 ident flag
1574 assign =
1575 intcon 1
1576 semicolon ;
1577 rcbrack }
1578 ifsy if
1579 lparent (
1580 ident flag
1581 eql ==
1582 intcon 0
1583 rparent )
1584 lcbrack {
1585 ident judge
1586 assign =
1587 ident judge
1588 plus +
1589 intcon 1
1590 semicolon ;
1591 rcbrack }
1592 rcbrack }
1593 ident flag
1594 assign =
1595 intcon 0
1596 semicolon ;
1597 ident a
1598 assign =
1599 ident a
1600 plus +
1601 intcon 1
1602 semicolon ;
1603 rcbrack }
1604 ident a
1605 assign =
1606 intcon 0
1607 semicolon ;
1608 ifsy if
1609 lparent (
1610 ident const_1
1611 eql ==
1612 intcon 1
1613 rparent )
1614 lcbrack {
1615 switchsy while
1616 lparent (
1617 ident a
1618 lss <
1619 intcon 2
1620 rparent )
1621 lcbrack {
1622 ident judge
1623 assign =
1624 ident judge
1625 plus +
1626 intcon 1
1627 semicolon ;
1628 ident a
1629 assign =
1630 ident a
1631 plus +
1632 intcon 1
1633 semicolon ;
1634 rcbrack }
1635 rcbrack }
1636 ident a
1637 assign =
1638 intcon 0
1639 semicolon ;
1640 switchsy while
1641 lparent (
1642 ident a
1643 leq <=
1644 intcon 1
1645 rparent )
1646 lcbrack {
1647 ifsy if
1648 lparent (
1649 ident const_1
1650 eql ==
1651 intcon 1
1652 rparent )
1653 lcbrack {
1654 casesy switch
1655 lparent (
1656 ident a
1657 rparent )
1658 lcbrack {
1659 defaultsy case
1660 intcon 0
1661 colon :
1662 lcbrack {
1663 ident judge
1664 assign =
1665 ident judge
1666 plus +
1667 intcon 1
1668 semicolon ;
1669 rcbrack }
1670 whilesy default
1671 colon :
1672 ident judge
1673 assign =
1674 ident judge
1675 plus +
1676 intcon 1
1677 semicolon ;
1678 rcbrack }
1679 rcbrack }
1680 ident a
1681 assign =
1682 ident a
1683 plus +
1684 intcon 1
1685 semicolon ;
1686 rcbrack }
1687 ident flag
1688 assign =
1689 intcon 0
1690 semicolon ;
1691 ident c
1692 assign =
1693 charcon a
1694 semicolon ;
1695 ifsy if
1696 lparent (
1697 ident c
1698 eql ==
1699 charcon a
1700 rparent )
1701 lcbrack {
1702 ident judge
1703 assign =
1704 ident judge
1705 plus +
1706 intcon 1
1707 semicolon ;
1708 rcbrack }
1709 ifsy if
1710 lparent (
1711 ident c
1712 eql ==
1713 charcon b
1714 rparent )
1715 lcbrack {
1716 ident judge
1717 assign =
1718 ident judge
1719 plus +
1720 intcon 1
1721 semicolon ;
1722 ident flag
1723 assign =
1724 intcon 1
1725 semicolon ;
1726 rcbrack }
1727 ifsy if
1728 lparent (
1729 ident flag
1730 eql ==
1731 intcon 0
1732 rparent )
1733 lcbrack {
1734 ident judge
1735 assign =
1736 ident judge
1737 plus +
1738 intcon 1
1739 semicolon ;
1740 rcbrack }
1741 scanfsy return
1742 semicolon ;
1743 rcbrack }
1744 voidsy void
1745 ident test_switch
1746 lparent (
1747 rparent )
1748 lcbrack {
1749 intsy int
1750 ident a
1751 comma ,
1752 ident b
1753 comma ,
1754 ident flag
1755 comma ,
1756 ident test
1757 semicolon ;
1758 charsy char
1759 ident c
1760 semicolon ;
1761 ident flag
1762 assign =
1763 intcon 0
1764 semicolon ;
1765 ident test
1766 assign =
1767 intcon 0
1768 semicolon ;
1769 ident a
1770 assign =
1771 intcon 0
1772 semicolon ;
1773 ident b
1774 assign =
1775 intcon 0
1776 semicolon ;
1777 switchsy while
1778 lparent (
1779 ident a
1780 leq <=
1781 intcon 6
1782 rparent )
1783 lcbrack {
1784 casesy switch
1785 lparent (
1786 ident a
1787 rparent )
1788 lcbrack {
1789 defaultsy case
1790 intcon 0
1791 colon :
1792 lcbrack {
1793 ifsy if
1794 lparent (
1795 ident const_1
1796 eql ==
1797 intcon 1
1798 rparent )
1799 lcbrack {
1800 ident judge
1801 assign =
1802 ident judge
1803 plus +
1804 intcon 1
1805 semicolon ;
1806 ident num
1807 lsbrack [
1808 intcon 0
1809 rsbrack ]
1810 assign =
1811 ident const_3
1812 semicolon ;
1813 ident num
1814 lsbrack [
1815 ident const_3
1816 rsbrack ]
1817 assign =
1818 ident get_sum
1819 lparent (
1820 ident const_3
1821 rparent )
1822 semicolon ;
1823 rcbrack }
1824 ifsy if
1825 lparent (
1826 ident const_1
1827 eql ==
1828 intcon 0
1829 rparent )
1830 lcbrack {
1831 ident judge
1832 assign =
1833 ident judge
1834 plus +
1835 intcon 1
1836 semicolon ;
1837 ident flag
1838 assign =
1839 intcon 1
1840 semicolon ;
1841 rcbrack }
1842 ifsy if
1843 lparent (
1844 ident flag
1845 eql ==
1846 intcon 0
1847 rparent )
1848 lcbrack {
1849 ident judge
1850 assign =
1851 ident judge
1852 plus +
1853 intcon 1
1854 semicolon ;
1855 rcbrack }
1856 ident test
1857 assign =
1858 intcon 1
1859 semicolon ;
1860 rcbrack }
1861 defaultsy case
1862 intcon 1
1863 colon :
1864 lcbrack {
1865 ident judge
1866 assign =
1867 ident judge
1868 plus +
1869 intcon 1
1870 semicolon ;
1871 ident b
1872 assign =
1873 intcon 0
1874 semicolon ;
1875 switchsy while
1876 lparent (
1877 ident b
1878 leq <=
1879 intcon 2
1880 rparent )
1881 lcbrack {
1882 ident judge
1883 assign =
1884 ident judge
1885 plus +
1886 intcon 1
1887 semicolon ;
1888 ident b
1889 assign =
1890 ident b
1891 plus +
1892 intcon 1
1893 semicolon ;
1894 rcbrack }
1895 ident test
1896 assign =
1897 intcon 1
1898 semicolon ;
1899 rcbrack }
1900 defaultsy case
1901 intcon 2
1902 colon :
1903 lcbrack {
1904 semicolon ;
1905 rcbrack }
1906 whilesy default
1907 colon :
1908 lcbrack {
1909 ident judge
1910 assign =
1911 ident judge
1912 plus +
1913 intcon 1
1914 semicolon ;
1915 casesy switch
1916 lparent (
1917 ident a
1918 rdiv /
1919 ident const_3
1920 rparent )
1921 lcbrack {
1922 defaultsy case
1923 intcon 1
1924 colon :
1925 lcbrack {
1926 ident judge
1927 assign =
1928 ident judge
1929 plus +
1930 intcon 1
1931 semicolon ;
1932 ident test
1933 assign =
1934 intcon 1
1935 semicolon ;
1936 rcbrack }
1937 whilesy default
1938 colon :
1939 lcbrack {
1940 semicolon ;
1941 rcbrack }
1942 rcbrack }
1943 ifsy if
1944 lparent (
1945 ident test
1946 eql ==
1947 intcon 0
1948 rparent )
1949 lcbrack {
1950 ident judge
1951 assign =
1952 ident judge
1953 plus +
1954 intcon 1
1955 semicolon ;
1956 rcbrack }
1957 ident test
1958 assign =
1959 intcon 1
1960 semicolon ;
1961 rcbrack }
1962 rcbrack }
1963 ifsy if
1964 lparent (
1965 ident test
1966 eql ==
1967 intcon 0
1968 rparent )
1969 lcbrack {
1970 ident judge
1971 assign =
1972 ident judge
1973 plus +
1974 intcon 1
1975 semicolon ;
1976 rcbrack }
1977 ident test
1978 assign =
1979 intcon 0
1980 semicolon ;
1981 ident a
1982 assign =
1983 ident a
1984 plus +
1985 intcon 1
1986 semicolon ;
1987 rcbrack }
1988 ident a
1989 assign =
1990 intcon 0
1991 semicolon ;
1992 switchsy while
1993 lparent (
1994 ident a
1995 lss <
1996 intcon 3
1997 rparent )
1998 lcbrack {
1999 ifsy if
2000 lparent (
2001 ident a
2002 eql ==
2003 intcon 0
2004 rparent )
2005 ident c
2006 assign =
2007 charcon a
2008 semicolon ;
2009 ifsy if
2010 lparent (
2011 ident a
2012 eql ==
2013 intcon 1
2014 rparent )
2015 ident c
2016 assign =
2017 charcon b
2018 semicolon ;
2019 ifsy if
2020 lparent (
2021 ident a
2022 eql ==
2023 intcon 2
2024 rparent )
2025 ident c
2026 assign =
2027 charcon c
2028 semicolon ;
2029 casesy switch
2030 lparent (
2031 ident c
2032 rparent )
2033 lcbrack {
2034 defaultsy case
2035 charcon a
2036 colon :
2037 lcbrack {
2038 ident judge
2039 assign =
2040 ident judge
2041 plus +
2042 intcon 1
2043 semicolon ;
2044 rcbrack }
2045 defaultsy case
2046 charcon b
2047 colon :
2048 lcbrack {
2049 ident judge
2050 assign =
2051 ident judge
2052 plus +
2053 intcon 1
2054 semicolon ;
2055 rcbrack }
2056 whilesy default
2057 colon :
2058 lcbrack {
2059 ident judge
2060 assign =
2061 ident judge
2062 plus +
2063 intcon 1
2064 semicolon ;
2065 rcbrack }
2066 rcbrack }
2067 ident a
2068 assign =
2069 ident a
2070 plus +
2071 intcon 1
2072 semicolon ;
2073 rcbrack }
2074 ident a
2075 assign =
2076 intcon 1
2077 semicolon ;
2078 casesy switch
2079 lparent (
2080 ident a
2081 rparent )
2082 lcbrack {
2083 defaultsy case
2084 intcon 1
2085 colon :
2086 semicolon ;
2087 rcbrack }
2088 scanfsy return
2089 semicolon ;
2090 rcbrack }
2091 voidsy void
2092 ident test_function
2093 lparent (
2094 rparent )
2095 lcbrack {
2096 intsy int
2097 ident a
2098 semicolon ;
2099 charsy char
2100 ident c
2101 semicolon ;
2102 ident a
2103 assign =
2104 intcon 11
2105 semicolon ;
2106 ident c
2107 assign =
2108 charcon a
2109 semicolon ;
2110 ident judge
2111 assign =
2112 ident judge
2113 plus +
2114 intcon 1
2115 semicolon ;
2116 printfsy printf
2117 lparent (
2118 ident higher
2119 lparent (
2120 ident c
2121 rparent )
2122 plus +
2123 ident count_to_10
2124 lparent (
2125 rparent )
2126 rparent )
2127 semicolon ;
2128 ident prt_message
2129 lparent (
2130 rparent )
2131 semicolon ;
2132 scanfsy return
2133 semicolon ;
2134 rcbrack }
2135 voidsy void
2136 ident test_printf
2137 lparent (
2138 rparent )
2139 lcbrack {
2140 intsy int
2141 ident x
2142 semicolon ;
2143 ident x
2144 assign =
2145 intcon 1
2146 semicolon ;
2147 ident judge
2148 assign =
2149 ident judge
2150 plus +
2151 intcon 1
2152 semicolon ;
2153 printfsy printf
2154 lparent (
2155 ident x
2156 rparent )
2157 semicolon ;
2158 ident x
2159 assign =
2160 intcon 5
2161 semicolon ;
2162 printfsy printf
2163 lparent (
2164 minus -
2165 lparent (
2166 ident num
2167 lsbrack [
2168 ident x
2169 rsbrack ]
2170 plus +
2171 ident num
2172 lsbrack [
2173 ident x
2174 plus +
2175 ident const_1
2176 rsbrack ]
2177 plus +
2178 intcon 3
2179 rparent )
2180 mult *
2181 ident count_to_10
2182 lparent (
2183 rparent )
2184 rdiv /
2185 ident const_3
2186 plus +
2187 charcon a
2188 plus +
2189 ident const_a
2190 minus -
2191 intcon 3
2192 mult *
2193 intcon 3
2194 rdiv /
2195 intcon 4
2196 rparent )
2197 semicolon ;
2198 scanfsy return
2199 semicolon ;
2200 rcbrack }
2201 voidsy void
2202 ident test_scanf
2203 lparent (
2204 rparent )
2205 lcbrack {
2206 intsy int
2207 ident x
2208 comma ,
2209 ident y
2210 comma ,
2211 ident z
2212 semicolon ;
2213 charsy char
2214 ident m
2215 comma ,
2216 ident n
2217 comma ,
2218 ident q
2219 semicolon ;
2220 ident judge
2221 assign =
2222 ident judge
2223 plus +
2224 intcon 1
2225 semicolon ;
2226 returnsy scanf
2227 lparent (
2228 ident x
2229 comma ,
2230 ident m
2231 rparent )
2232 semicolon ;
2233 ident judge
2234 assign =
2235 ident judge
2236 plus +
2237 ident x
2238 plus +
2239 ident m
2240 semicolon ;
2241 returnsy scanf
2242 lparent (
2243 ident m
2244 rparent )
2245 semicolon ;
2246 ident letter
2247 lsbrack [
2248 intcon 3
2249 rsbrack ]
2250 assign =
2251 ident m
2252 semicolon ;
2253 ident judge
2254 assign =
2255 ident judge
2256 plus +
2257 ident m
2258 semicolon ;
2259 returnsy scanf
2260 lparent (
2261 ident x
2262 rparent )
2263 semicolon ;
2264 ident judge
2265 assign =
2266 ident judge
2267 plus +
2268 ident x
2269 semicolon ;
2270 scanfsy return
2271 semicolon ;
2272 rcbrack }
2273 voidsy void
2274 ident test_varib2
2275 lparent (
2276 rparent )
2277 lcbrack {
2278 ident judge
2279 assign =
2280 ident judge
2281 plus +
2282 intcon 1
2283 semicolon ;
2284 ifsy if
2285 lparent (
2286 ident _
2287 eql ==
2288 intcon 1
2289 rparent )
2290 lcbrack {
2291 ident judge
2292 assign =
2293 ident judge
2294 plus +
2295 intcon 1
2296 semicolon ;
2297 rcbrack }
2298 scanfsy return
2299 semicolon ;
2300 rcbrack }
2301 voidsy void
2302 ident test_varib
2303 lparent (
2304 rparent )
2305 lcbrack {
2306 intsy int
2307 ident _
2308 semicolon ;
2309 ident judge
2310 assign =
2311 ident judge
2312 plus +
2313 intcon 1
2314 semicolon ;
2315 ident _
2316 assign =
2317 intcon 100
2318 semicolon ;
2319 ifsy if
2320 lparent (
2321 ident _
2322 eql ==
2323 intcon 100
2324 rparent )
2325 ident judge
2326 assign =
2327 ident judge
2328 plus +
2329 intcon 1
2330 semicolon ;
2331 ident test_varib2
2332 lparent (
2333 rparent )
2334 semicolon ;
2335 scanfsy return
2336 semicolon ;
2337 rcbrack }
2338 voidsy void
2339 ident test_para4
2340 lparent (
2341 intsy int
2342 ident a
2343 comma ,
2344 intsy int
2345 ident b
2346 comma ,
2347 intsy int
2348 ident c
2349 comma ,
2350 intsy int
2351 ident d
2352 comma ,
2353 intsy int
2354 ident e
2355 comma ,
2356 intsy int
2357 ident f
2358 comma ,
2359 intsy int
2360 ident g
2361 rparent )
2362 lcbrack {
2363 ident judge
2364 assign =
2365 ident judge
2366 plus +
2367 ident a
2368 plus +
2369 ident b
2370 plus +
2371 ident c
2372 plus +
2373 ident d
2374 plus +
2375 ident e
2376 plus +
2377 ident f
2378 plus +
2379 ident g
2380 semicolon ;
2381 rcbrack }
2382 intsy int
2383 ident test_para1
2384 lparent (
2385 intsy int
2386 ident a
2387 comma ,
2388 intsy int
2389 ident b
2390 rparent )
2391 lcbrack {
2392 ident judge
2393 assign =
2394 ident judge
2395 plus +
2396 intcon 1
2397 semicolon ;
2398 scanfsy return
2399 lparent (
2400 intcon 1
2401 rparent )
2402 semicolon ;
2403 rcbrack }
2404 charsy char
2405 ident test_para2
2406 lparent (
2407 charsy char
2408 ident a
2409 comma ,
2410 charsy char
2411 ident b
2412 rparent )
2413 lcbrack {
2414 ident judge
2415 assign =
2416 ident judge
2417 plus +
2418 intcon 1
2419 semicolon ;
2420 scanfsy return
2421 lparent (
2422 charcon a
2423 rparent )
2424 semicolon ;
2425 rcbrack }
2426 voidsy void
2427 ident test_para3
2428 lparent (
2429 charsy char
2430 ident a
2431 comma ,
2432 intsy int
2433 ident b
2434 rparent )
2435 lcbrack {
2436 ident judge
2437 assign =
2438 ident judge
2439 plus +
2440 intcon 1
2441 semicolon ;
2442 scanfsy return
2443 semicolon ;
2444 rcbrack }
2445 voidsy void
2446 ident test_para
2447 lparent (
2448 rparent )
2449 lcbrack {
2450 ident judge
2451 assign =
2452 ident judge
2453 plus +
2454 intcon 1
2455 semicolon ;
2456 ident test_para1
2457 lparent (
2458 intcon 1
2459 comma ,
2460 intcon 2
2461 rparent )
2462 semicolon ;
2463 ident test_para2
2464 lparent (
2465 charcon a
2466 comma ,
2467 charcon b
2468 rparent )
2469 semicolon ;
2470 ident test_para3
2471 lparent (
2472 charcon a
2473 comma ,
2474 intcon 1
2475 rparent )
2476 semicolon ;
2477 ident test_para4
2478 lparent (
2479 intcon 1
2480 comma ,
2481 intcon 2
2482 comma ,
2483 intcon 3
2484 comma ,
2485 intcon 4
2486 comma ,
2487 intcon 5
2488 comma ,
2489 intcon 6
2490 comma ,
2491 intcon 7
2492 rparent )
2493 semicolon ;
2494 scanfsy return
2495 semicolon ;
2496 rcbrack }
2497 voidsy void
2498 mainsy main
2499 lparent (
2500 rparent )
2501 lcbrack {
2502 intsy int
2503 ident x
2504 semicolon ;
2505 ident judge
2506 assign =
2507 intcon 0
2508 semicolon ;
2509 ident judge
2510 assign =
2511 ident judge
2512 plus +
2513 intcon 1
2514 semicolon ;
2515 ident x
2516 assign =
2517 intcon 0
2518 semicolon ;
2519 ident test_global_variable
2520 lparent (
2521 rparent )
2522 semicolon ;
2523 ident test_global_const
2524 lparent (
2525 rparent )
2526 semicolon ;
2527 ident test_brackets
2528 lparent (
2529 rparent )
2530 semicolon ;
2531 ident test_compare_operator
2532 lparent (
2533 rparent )
2534 semicolon ;
2535 ident test_expression
2536 lparent (
2537 rparent )
2538 semicolon ;
2539 ident test_while
2540 lparent (
2541 rparent )
2542 semicolon ;
2543 ident test_if
2544 lparent (
2545 rparent )
2546 semicolon ;
2547 ident test_switch
2548 lparent (
2549 rparent )
2550 semicolon ;
2551 ident test_function
2552 lparent (
2553 rparent )
2554 semicolon ;
2555 ident test_printf
2556 lparent (
2557 rparent )
2558 semicolon ;
2559 ident test_scanf
2560 lparent (
2561 rparent )
2562 semicolon ;
2563 ident test_varib
2564 lparent (
2565 rparent )
2566 semicolon ;
2567 ident test_para
2568 lparent (
2569 rparent )
2570 semicolon ;
2571 printfsy printf
2572 lparent (
2573 stringcon all test:
2574 comma ,
2575 ident judge
2576 rparent )
2577 semicolon ;
2578 scanfsy return
2579 semicolon ;
2580 rcbrack }
