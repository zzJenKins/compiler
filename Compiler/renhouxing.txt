Í¨¹ý
const int const_int_postive = 1, const_int_zero = +0, const_int_negtive = -1;
const char const_char_a = 'a', const_char_b = 'b', const_char_c = 'c', const_char_A = 'A', const_char_num = '9';
const char const_char_underline = '_',const_char_add = '+', const_char_mul = '*';

int int_global_var;
char char_global_var;

void testIf()
{
    const int test_if_1 = 1, test_if_2 = 2;
    const char const_char_a = 'b', const_char_b = 'a';
    if(const_char_a + 1 > const_char_b + 1)
        printf("b > a");
    if(const_char_a + 1 >= const_char_b + 1)
        printf("b >= a");
    if(test_if_1 < test_if_2)
        printf("1 < 2");
    if(test_if_1 <= test_if_2)
        printf("1 <= 2");
    if(test_if_1 == test_if_2)
        printf("1 == 2");
    if(test_if_1 != test_if_2)
        printf("1 != 2");
    if(test_if_1 - test_if_2)
        printf("1 - 2 = true");
    int_global_var = -1;
    char_global_var = 'a';
}

void testWhile(int loop_length)
{
    int test_while_loop, array[50], mul;
    test_while_loop = 0;
    mul = 1;
    while(test_while_loop < loop_length)
    {
        printf("loop value : ", test_while_loop);
        array[test_while_loop] = test_while_loop + 1;
        test_while_loop = test_while_loop + 1;
    }
    test_while_loop = 0;
    while(test_while_loop < loop_length)
    {
        mul = mul * array[test_while_loop];
        test_while_loop = test_while_loop + 1;
    }
    printf("product value : ", mul);
    int_global_var = -2;
    char_global_var = 'b';
}

void testSwitchCase(int test_switch_int, char test_switch_char)
{
    switch(test_switch_int)
    {
        case -2: printf("First parameter is : ", -2);
        case -1: printf("First parameter is : ", const_int_negtive);
        case 0: printf("First parameter is : ", 0);
        case 1: printf("First parameter is : ", const_int_postive);
        case 2: printf("First parameter is : ", 2);
        default: printf("Bad integer test parameter : ", test_switch_int);
    }
    switch(test_switch_char)
    {
        case 'a': printf("Second parameter is : ", const_char_a);
        case 'A': printf("Second parameter is : ", const_char_A);
        case '9': printf("Second parameter is : ", const_char_num);
        case '_': printf("Second parameter is : ", const_char_underline);
        case '+': printf("Second parameter is : ", const_char_add);
        case '*': printf("Second parameter is : ", const_char_mul);
        default: printf("Bad char test parameter : ", test_switch_char);
    }
    switch(0)
    {
        case 0:;
        default: ;
    }
    int_global_var = -3;
    char_global_var = 'c';
}

int returnInt()
{
    return (10);
}

char returnChar()
{
    return ('r');
}

int returnIntParameter(int int_parameter)
{
    int _tmp;
    _tmp = int_parameter;
    return (_tmp);
}

char returnCharParameter(char char_parameter)
{
    char _tmp;
    _tmp = char_parameter;
    return (_tmp);
}

void testAssign()
{
    const int test_assign_10 = +10;
    int int_test_assign, int_array_test_assign[3];
    char char_test_assign, char_array_test_assign[3];
    int_array_test_assign[0] = --2;
    int_array_test_assign[1] = -returnInt() + (test_assign_10 * (returnChar() - const_char_a) + returnIntParameter((97)));
    int_array_test_assign[2] = -'b' + 'c'; 
    int_test_assign = ++10 + returnIntParameter(-+2) * ('c' - const_char_a) / 

int_array_test_assign[0];
    char_array_test_assign[0] = 'a';
    char_array_test_assign[1] = returnCharParameter(char_array_test_assign[0]);
    char_array_test_assign[2] = returnChar();
    char_test_assign = char_array_test_assign[1];
    printf("int_test_assign : ", int_test_assign);
    printf("char_test_assign : ", char_test_assign);
    printf("int_test_assign[0] : ", int_array_test_assign[0]);
    printf("int_test_assign[1] : ", int_array_test_assign[1]);
    printf("int_test_assign[2] : ", int_array_test_assign[2]);
    printf("char_test_assign[0] : ", char_array_test_assign[0]);
    printf("char_test_assign[1] : ", char_array_test_assign[1]);
    printf("char_test_assign[2] : ", char_array_test_assign[2]);
    int_global_var = -4;
    char_global_var = 'd';
}

void testInputOutput()
{
    int int_test_input;
    char char_test_input;
    scanf(int_test_input, char_test_input);
    printf(int_test_input);
    printf(char_test_input);
    int_global_var = -5;
    char_global_var = 'e';
}

int testRecursion(int n)
{
    if(n == 1)
        return (n);
    return (n * testRecursion(n - 1));
}

int testRecursion2(int n)
{
    switch(n)
    {
        case 0: return (1);
        case 1: return (1);
        default: return (n * testRecursion2(n - 1));
    }
}

void testTrick()
{
    {;{};}
    {{{}}}
    ;;;;;;
}

void testCallFunction()
{
    int test_recursion_result;
    printf("---------------test if---------------");
    testIf();
    printf("int_global_var : ", int_global_var);
    printf("char_global_var : ", char_global_var);
    printf("---------------test while---------------");
    testWhile(5);
    printf("int_global_var : ", int_global_var);
    printf("char_global_var : ", char_global_var);
    printf("---------------test switch---------------");
    testSwitchCase(const_int_postive,const_char_a);
    testSwitchCase(const_int_negtive,'+');
    testSwitchCase(0,'*');
    testSwitchCase(-3,'_');
    testSwitchCase(3,const_char_num);
    printf("int_global_var : ", int_global_var);
    printf("char_global_var : ", char_global_var);
    printf("---------------test assign---------------");
    testAssign();
    printf("int_global_var : ", int_global_var);
    printf("char_global_var : ", char_global_var);
    printf("---------------test in out---------------");
    testInputOutput();
    printf("int_global_var : ", int_global_var);
    printf("char_global_var : ", char_global_var);
    printf("---------------test recursion---------------");
    test_recursion_result = testRecursion(5);
    printf("Factorial result is : ", test_recursion_result);
    test_recursion_result = testRecursion(8);
    printf("Factorial result is : ", test_recursion_result);
    test_recursion_result = testRecursion2(0);
    printf("Factorial result is : ", test_recursion_result);
    int_global_var = -6;
    char_global_var = 'f';
}

void main()
{
    int int_global_var;
    char char_global_var;
    testCallFunction();
    testTrick();
    int_global_var = 0;
    char_global_var = '_';
    printf("int_global_var : ", int_global_var);
    printf("char_global_var : ", char_global_var);
}